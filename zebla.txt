import streamlit as st
import requests
import os

# Streamlit UI
st.title("LLM-Powered PDF Question Answering")

# Define the folder to store uploaded files
upload_folder = 'data'

# Create the 'data' folder if it doesn't exist
if not os.path.exists(upload_folder):
    os.makedirs(upload_folder)

# File upload
uploaded_file = st.file_uploader("Upload a PDF", type=["pdf"])

# If a file is uploaded, proceed with the question-answering process
if uploaded_file:
    # Save the uploaded file to the 'data' folder
    file_path = os.path.join(upload_folder, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Initialize a session state to store questions and answers
    if 'qa_history' not in st.session_state:
        st.session_state.qa_history = []

    # Display all previous question-answer pairs
    for i, (question, answer) in enumerate(st.session_state.qa_history):
        st.subheader(f"Question {i + 1}:")
        st.write(question)
        st.subheader(f"Answer {i + 1}:")
        st.write(answer)

    # Create a container to display the answer
    answer_container = st.empty()

    # Create a container for the input at the bottom
    st.markdown("""
        <style>
            .stTextInput {
              position: fixed;
              bottom: 0;
              left: 50%;
              transform: translateX(-50%);
              width: 65%;
              z-index: 100;
              padding: 10px;
            }
        </style>
    """, unsafe_allow_html=True)

    # Let the user ask a question
    question = st.text_input("Ask a question about the PDF:", key="question_input", label_visibility="collapsed")

    if question:
        # Send the question to the FastAPI backend
        url = "http://localhost:8000/ask"  # Adjust the URL if needed
        data = {'question': question, 'file_name': uploaded_file.name}
        
        # Send POST request to FastAPI backend with streaming
        with st.spinner("Waiting for response..."):
            response = requests.post(url, json=data, stream=True)
            
            if response.status_code == 200:
                # Stream the response line by line and store it in session state
                answer = ""
                for chunk in response.iter_lines(decode_unicode=True):
                    if chunk:  # Skip empty chunks
                        answer += chunk + "\n"
                
                # Display the answer dynamically
                answer_container.subheader("Answer:")
                answer_container.write(answer)

                # Add the current question and answer to session state history
                st.session_state.qa_history.append((question, answer))

            else:
                st.error(f"Failed to get an answer from the server. Status code: {response.status_code}")
